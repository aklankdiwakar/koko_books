# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BookList(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, novels: List[List[str]]=None, fiction: List[List[str]]=None, regular: List[List[str]]=None):  # noqa: E501
        """BookList - a model defined in Swagger

        :param novels: The novels of this BookList.  # noqa: E501
        :type novels: List[List[str]]
        :param fiction: The fiction of this BookList.  # noqa: E501
        :type fiction: List[List[str]]
        :param regular: The regular of this BookList.  # noqa: E501
        :type regular: List[List[str]]
        """
        self.swagger_types = {
            'novels': List[List[str]],
            'fiction': List[List[str]],
            'regular': List[List[str]]
        }

        self.attribute_map = {
            'novels': 'novels',
            'fiction': 'fiction',
            'regular': 'regular'
        }

        self._novels = novels
        self._fiction = fiction
        self._regular = regular

    @classmethod
    def from_dict(cls, dikt) -> 'BookList':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BookList of this BookList.  # noqa: E501
        :rtype: BookList
        """
        return util.deserialize_model(dikt, cls)

    @property
    def novels(self) -> List[List[str]]:
        """Gets the novels of this BookList.


        :return: The novels of this BookList.
        :rtype: List[List[str]]
        """
        return self._novels

    @novels.setter
    def novels(self, novels: List[List[str]]):
        """Sets the novels of this BookList.


        :param novels: The novels of this BookList.
        :type novels: List[List[str]]
        """
        if novels is None:
            raise ValueError("Invalid value for `novels`, must not be `None`")  # noqa: E501

        self._novels = novels

    @property
    def fiction(self) -> List[List[str]]:
        """Gets the fiction of this BookList.


        :return: The fiction of this BookList.
        :rtype: List[List[str]]
        """
        return self._fiction

    @fiction.setter
    def fiction(self, fiction: List[List[str]]):
        """Sets the fiction of this BookList.


        :param fiction: The fiction of this BookList.
        :type fiction: List[List[str]]
        """
        if fiction is None:
            raise ValueError("Invalid value for `fiction`, must not be `None`")  # noqa: E501

        self._fiction = fiction

    @property
    def regular(self) -> List[List[str]]:
        """Gets the regular of this BookList.


        :return: The regular of this BookList.
        :rtype: List[List[str]]
        """
        return self._regular

    @regular.setter
    def regular(self, regular: List[List[str]]):
        """Sets the regular of this BookList.


        :param regular: The regular of this BookList.
        :type regular: List[List[str]]
        """
        if regular is None:
            raise ValueError("Invalid value for `regular`, must not be `None`")  # noqa: E501

        self._regular = regular
